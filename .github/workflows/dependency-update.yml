name: Dependency Update

on:
  schedule:
    # 每周一早上8点检查依赖更新
    - cron: '0 8 * * 1'
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Check for dependency updates
      run: ./gradlew dependencyUpdates

    - name: Upload dependency report
      uses: actions/upload-artifact@v4
      with:
        name: dependency-updates-report
        path: build/dependencyUpdates/
        retention-days: 30

  gradle-wrapper-update:
    name: Update Gradle Wrapper
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Update Gradle Wrapper
      run: |
        # 获取最新的Gradle版本
        LATEST_GRADLE=$(curl -s https://api.github.com/repos/gradle/gradle/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//')
        echo "Latest Gradle version: $LATEST_GRADLE"
        
        # 更新Gradle Wrapper
        ./gradlew wrapper --gradle-version=$LATEST_GRADLE

    - name: Check for changes
      id: changes
      run: |
        if git diff --quiet; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request
      if: steps.changes.outputs.changed == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update Gradle wrapper'
        title: '🔧 Update Gradle Wrapper'
        body: |
          ## 🔧 Gradle Wrapper 更新
          
          这个PR自动更新了Gradle Wrapper到最新版本。
          
          ### 📋 更改内容
          - 更新 `gradle/wrapper/gradle-wrapper.properties`
          - 更新 `gradle/wrapper/gradle-wrapper.jar`
          - 更新 `gradlew` 和 `gradlew.bat`
          
          ### ✅ 检查清单
          - [ ] 构建成功
          - [ ] 测试通过
          - [ ] 无破坏性更改
          
          ---
          *此PR由GitHub Actions自动创建*
        branch: chore/update-gradle-wrapper
        delete-branch: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run security audit
      run: |
        # 检查已知的安全漏洞
        ./gradlew dependencyCheckAnalyze || true

    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report
        path: build/reports/dependency-check-report.html
        retention-days: 30

  notify-updates:
    name: Notify Updates
    needs: [update-dependencies, gradle-wrapper-update, security-audit]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create issue for updates
      if: needs.update-dependencies.result == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const title = '📦 依赖更新报告 - ' + new Date().toISOString().split('T')[0];
          const body = `## 📦 依赖更新检查报告
          
          ### 📅 检查时间
          ${new Date().toLocaleString()}
          
          ### 🔍 检查结果
          - 依赖更新检查: ${{ needs.update-dependencies.result == 'success' && '✅ 完成' || '❌ 失败' }}
          - Gradle更新检查: ${{ needs.gradle-wrapper-update.result == 'success' && '✅ 完成' || '❌ 失败' }}
          - 安全审计: ${{ needs.security-audit.result == 'success' && '✅ 完成' || '❌ 失败' }}
          
          ### 📋 操作建议
          1. 查看依赖更新报告工件
          2. 检查是否有安全漏洞需要修复
          3. 考虑更新重要依赖
          
          ### 🔗 相关链接
          - [依赖更新报告](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [安全审计报告](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          ---
          *此Issue由GitHub Actions自动创建*`;
          
          // 检查是否已存在类似的issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'dependencies'
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('依赖更新报告') && 
            issue.created_at > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString()
          );
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['dependencies', 'maintenance']
            });
          }
