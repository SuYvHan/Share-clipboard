name: Simple Auto Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., v1.0.0)'
        required: true
        type: string

env:
  JAVA_VERSION: '17'

jobs:
  build-and-release:
    name: Build and Release APK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x gradlew

    - name: Setup Keystore
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        if [ -n "$KEYSTORE_BASE64" ]; then
          echo "$KEYSTORE_BASE64" | base64 -d > app/keystore.jks
          echo "KEYSTORE_EXISTS=true" >> $GITHUB_ENV
          echo "✅ Keystore configured"
        else
          echo "KEYSTORE_EXISTS=false" >> $GITHUB_ENV
          echo "⚠️ No keystore found, will build unsigned"
        fi

    - name: Build Release APK
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [ "$KEYSTORE_EXISTS" = "true" ]; then
          echo "🔨 Building signed release APK..."
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=keystore.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
        else
          echo "🔨 Building unsigned release APK..."
          ./gradlew assembleRelease
        fi

    - name: Get APK info
      id: apk
      run: |
        APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
        APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
        APK_NAME="ClipboardSync-${{ steps.version.outputs.version }}.apk"
        
        # 重命名APK
        cp "$APK_PATH" "app/build/outputs/apk/release/$APK_NAME"
        NEW_APK_PATH="app/build/outputs/apk/release/$APK_NAME"
        
        # 计算SHA256
        APK_SHA256=$(sha256sum "$NEW_APK_PATH" | cut -d' ' -f1)
        
        echo "path=$NEW_APK_PATH" >> $GITHUB_OUTPUT
        echo "size=$APK_SIZE" >> $GITHUB_OUTPUT
        echo "name=$APK_NAME" >> $GITHUB_OUTPUT
        echo "sha256=$APK_SHA256" >> $GITHUB_OUTPUT
        
        echo "📱 APK: $APK_NAME ($APK_SIZE)"

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: ClipboardSync-${{ steps.version.outputs.version }}
        path: ${{ steps.apk.outputs.path }}
        retention-days: 90

    - name: Generate changelog
      id: changelog
      run: |
        echo "📝 Generating changelog..."
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGES=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          CHANGES=$(git log --pretty=format:"- %s" -5)
        fi
        
        if [ -z "$CHANGES" ]; then
          CHANGES="- 版本更新"
        fi
        
        {
          echo "changes<<EOF"
          echo "$CHANGES"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ClipboardSync ${{ steps.version.outputs.version }}
        files: ${{ steps.apk.outputs.path }}
        body: |
          ## 📱 剪切板同步应用 ${{ steps.version.outputs.version }}
          
          ### 📦 下载信息
          - **APK文件**: ${{ steps.apk.outputs.name }}
          - **文件大小**: ${{ steps.apk.outputs.size }}
          - **SHA256**: `${{ steps.apk.outputs.sha256 }}`
          - **构建时间**: ${{ github.event.head_commit.timestamp }}
          
          ### 🔄 更新内容
          ${{ steps.changelog.outputs.changes }}
          
          ### 🔧 安装说明
          1. 📥 下载APK文件
          2. ⚙️ 启用"未知来源"安装
          3. 📱 安装并授权
          
          ### ✨ 主要功能
          - 🔄 实时剪切板同步
          - 📱 多设备支持  
          - 🖼️ 图片同步
          - 🔒 权限管理
          - 🌙 深色模式
          
          ### 📋 系统要求
          - Android 8.0+ (API 26)
          - 网络连接
          - 存储和通知权限
          
          ### 🐛 问题反馈
          [提交Issue](https://github.com/${{ github.repository }}/issues)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Success
      run: |
        echo "🎉 发布成功！"
        echo "📱 版本: ${{ steps.version.outputs.version }}"
        echo "📦 大小: ${{ steps.apk.outputs.size }}"
        echo "🔗 链接: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
