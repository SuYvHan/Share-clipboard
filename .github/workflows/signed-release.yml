name: Build Signed Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
        type: string

env:
  JAVA_VERSION: '17'

jobs:
  build-signed-release:
    name: Build Signed Release APK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Decode Keystore
      if: ${{ secrets.KEYSTORE_BASE64 }}
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > app/keystore.jks

    - name: Build Signed Release APK
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        if [ -f "app/keystore.jks" ]; then
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=keystore.jks \
            -Pandroid.injected.signing.store.password="$KEYSTORE_PASSWORD" \
            -Pandroid.injected.signing.key.alias="$KEY_ALIAS" \
            -Pandroid.injected.signing.key.password="$KEY_PASSWORD"
        else
          echo "No keystore found, building unsigned release"
          ./gradlew assembleRelease
        fi

    - name: Get APK info
      id: apk_info
      run: |
        APK_PATH=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
        APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "apk_size=$APK_SIZE" >> $GITHUB_OUTPUT
        echo "apk_name=$(basename $APK_PATH)" >> $GITHUB_OUTPUT

    - name: Upload Signed APK
      uses: actions/upload-artifact@v4
      with:
        name: signed-release-apk
        path: ${{ steps.apk_info.outputs.apk_path }}
        retention-days: 90

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.apk_info.outputs.apk_path }}
        body: |
          ## 📱 剪切板同步应用正式版
          
          ### 📦 发布信息
          - **APK大小**: ${{ steps.apk_info.outputs.apk_size }}
          - **文件名**: ${{ steps.apk_info.outputs.apk_name }}
          - **构建时间**: ${{ github.event.head_commit.timestamp }}
          
          ### 🔧 安装方法
          1. 下载APK文件到Android设备
          2. 在设置中启用"未知来源"应用安装
          3. 点击APK文件进行安装
          4. 首次启动时授予必要权限
          
          ### ✨ 主要功能
          - 🔄 实时剪切板同步
          - 📱 多设备支持
          - 🖼️ 图片和文件同步
          - 🔒 权限智能管理
          - 🌙 深色模式支持
          
          ### 📋 系统要求
          - Android 8.0 (API 26) 及以上
          - 网络连接
          - 存储权限
          - 通知权限（Android 13+）
          
          ### 🐛 问题反馈
          如遇到问题，请在 [Issues](https://github.com/${{ github.repository }}/issues) 中反馈。
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    needs: build-signed-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Send notification
      run: |
        echo "🎉 新版本 ${GITHUB_REF#refs/tags/} 已发布！"
        echo "📱 APK已上传到GitHub Releases"
